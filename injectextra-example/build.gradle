buildscript {
  repositories {
    mavenCentral()

    // NOTE: This is only needed when developing the plugin!
    mavenLocal()

    //if you need support lib in your app
    //add this repo point ing to your android sdk home
    //maven {
    //  url "<android sdk dir>/extras/android/m2repository/"
    //}
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:0.12.2'
    classpath 'com.github.stephanenicolas.morpheus:morpheus-plugin:1.0.0'
    classpath("com.github.stephanenicolas.injectextra:injectextra-plugin:1.0.0-SNAPSHOT")
    //if support is needed add this
    //also see repositories section
    //classpath 'com.android.support:support-v4:19.1.0'

    //for tests
    classpath 'com.github.jcandksolutions.gradle:android-unit-test:1.3.0'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'injectextra'

repositories {
  mavenCentral()

  // NOTE: This is only needed when developing the plugin!
  mavenLocal()
}

android {
  compileSdkVersion 20
  buildToolsVersion '20.0.0'

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}

apply plugin: 'android-unit-test'

dependencies {
  // *********** ROBOLETRIC UNIT TEST DEPENDENCY ************ //
  testCompile("junit:junit:$JUNIT_VERSION") {
    exclude module: 'hamcrest-core'
  }

  testCompile "org.bouncycastle:bcprov-jdk15:$BOUNCYCASTLE_VERSION"

  testCompile("org.robolectric:robolectric:$ROBOLECTRIC_VERSION") {
    exclude module: 'classworlds'
    exclude module: 'maven-artifact'
    exclude module: 'maven-artifact-manager'
    exclude module: 'maven-error-diagnostics'
    exclude module: 'maven-model'
    exclude module: 'maven-plugin-registry'
    exclude module: 'maven-profile'
    exclude module: 'maven-project'
    exclude module: 'maven-settings'
    exclude module: 'nekohtml'
    exclude module: 'plexus-container-default'
    exclude module: 'plexus-interpolation'
    exclude module: 'plexus-utils'
    exclude module: 'wagon-file'
    exclude module: 'wagon-http-lightweight'
    exclude module: 'wagon-http-shared'
    exclude module: 'wagon-provider-api'
    exclude module: 'commons-logging'
    exclude module: 'httpclient'
    exclude group: 'com.google.android'
  }
  testCompile("org.apache.httpcomponents:httpclient:$HTTP_CLIENT_VERSION")
  testCompile("commons-logging:commons-logging:$COMMONS_LOGGING_VERSION")
  testCompile("com.google.android:android-test:$ANDROID_TEST_VERSION")
  testCompile "org.easymock:easymock:$EASY_MOCK_VERSION"
}




//this is needed if you use robolectric and want to use injection of extras in test.
//TODO make it easier
import com.github.stephanenicolas.injectextra.InjectResourceProcessor;

gradle.projectsEvaluated {
  //testDebug should trigger transformation of source classes (not tests)
  tasks.withType(JavaCompile) { task ->
    if (task.name.contains('Test')) {
      def matcher = task.name =~ "Test(.*)Java"
      String variantName = matcher[0][1]
      String transformerClassName = InjectResourceProcessor.class.getSimpleName()

      def transformTask = "transform${transformerClassName}${variantName}"
      def copyTransformedTask = "copyTransformed${transformerClassName}${variantName}"
      try {
        task.dependsOn(project.tasks.getByName(transformTask))
        task.dependsOn(project.tasks.getByName(copyTransformedTask))
      } catch (Exception e) {
      }
    }
  }
}
check.dependsOn test